import Head from 'next/head'
import { Inter } from '@next/font/google'
import { axiosInstance } from '../helpers/axiosHelper';
import { setJwtCookie } from '../helpers/jwtCookieHelper';
import { useState } from 'react';
import Web3 from 'web3';
import { LoadingSpinner } from '../components/LoadingSpinner';

const inter = Inter({ subsets: ['latin'] })

// @ts-ignore
export default function Login({loginWrapperSetter}) {
  const [isError, setIsError] = useState(false);
  const [errorMsg, setErrorMsg] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const LoggingIn = async () => {
    setIsLoading(true)
    // @ts-ignore: Object is possibly 'null'
    const email = document.getElementById('email').value
    // @ts-ignore: Object is possibly 'null'
    const password = document.getElementById('password').value

    if (email != '' && password != ''){
      await axiosInstance.post('/auth/login',{
        "username": email,
        "password": password
      }).then(response=>{
        if (response.status == 201){
          setJwtCookie(response.data.access_token)
          loginWrapperSetter(true)
        }
      }).catch(response=>{
        try {
          const data = response.response.data
          if (data.statusCode === 401){
            setIsError(true)
            setErrorMsg("email or password is invalid")
          }else{
            setIsError(true)
            setErrorMsg(data.message)
          }
        } catch (error) {
          setIsError(true)
          setErrorMsg(response.message)
        }
      })
    }else{
      setIsError(true)
      setErrorMsg('email & password must filled!')
    }
    setIsLoading(false)
  }

  const detectCurrentProvider = () => {
    let provider;
    // @ts-ignore
    if (window.ethereum) {
      // @ts-ignore
      provider = window.ethereum;
      // @ts-ignore
    } else if (window.web3) {
      // @ts-ignore
      provider = window.web3.currentProvider;
    } else {
      alert('Non-ethereum browser detected. You should install web3 wallet');
    }
    return provider;
  };

  const onConnect = async() => {
    setIsLoading(true)
    try {
      const currentProvider = detectCurrentProvider();
      if(currentProvider) {
        await currentProvider.request({method: 'eth_requestAccounts'});
        const web3 = new Web3(currentProvider);
        const userAccount  =await web3.eth.getAccounts();
        const account = userAccount[0];

        await axiosInstance.post('/auth/login_web3',{
          "wallet_address": account
        }).then(response=>{
          if (response.status == 201){
            setJwtCookie(response.data.access_token)
            loginWrapperSetter(true)
          }
        }).catch(response=>{
          const data = response.response.data
          setIsError(true)
          setErrorMsg(data.message)
        })
      }
    } catch(err) {
      console.log(err);
    }
    setIsLoading(false)
  }

  const disableWarning = () =>{
    setIsError(false)
  }

  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='container'>
        <p className='text-2xl text-center mt-10 mb-5'>Login</p>
        <div className="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 mx-auto">
          <div className="mb-6">
            <label htmlFor="email" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your email</label>
            <input type="email" id="email" className="base_input" placeholder="example@mail.com" required />
          </div>
          <div className="mb-3">
            <label htmlFor="password" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your password</label>
            <input type="password" id="password" className="base_input" required/>
          </div>
          <div className='mb-6'>
            <a className="underline decoration-sky-500" href="/sign_up">register now</a>
          </div>
          {isError &&
            <div id="alert-border-2" className="flex p-4 mb-4 text-red-800 border-t-4 border-red-300 bg-red-50 dark:text-red-400 dark:bg-gray-800 dark:border-red-800" role="alert">
              <svg className="flex-shrink-0 w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd"></path></svg>
              <div className="ml-3 text-sm font-medium">
                {errorMsg}
              </div>
              <button onClick={() => disableWarning()} type="button" className="ml-auto -mx-1.5 -my-1.5 bg-red-50 text-red-500 rounded-lg focus:ring-2 focus:ring-red-400 p-1.5 hover:bg-red-200 inline-flex h-8 w-8 dark:bg-gray-800 dark:text-red-400 dark:hover:bg-gray-700"  data-dismiss-target="#alert-border-2" aria-label="Close">
                <svg aria-hidden="true" className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd"></path></svg>
              </button>
            </div>
          }
          <div className="mb-3">
            <button onClick={()=>LoggingIn()} type="submit" className="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
              {isLoading?
                <LoadingSpinner/>:
                <>Log in</>
              }
            </button>
          </div>
          <div>
            <button onClick={()=>onConnect()} type="submit" className="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
              {isLoading?
                <LoadingSpinner/>:
                <>Web3 Log in</>
              }
            </button>
          </div>
        </div>
      </main>
    </>
  )
}